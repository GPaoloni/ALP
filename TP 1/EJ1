SINTAXIS ABSTRACTA

intexp ::= nat
         | var
         | − intexp
         | intexp + intexp
         | intexp − intexp
         | intexp × intexp
         | intexp ÷ intexp
         | var = intexp
         | intexp , intexp

boolexp ::= true
          | false
          | intexp == intexp
          | intexp != intexp
          | intexp < intexp
          | intexp > intexp
          | boolexp ∧ boolexp
          | boolexp ∨ boolexp
          | ¬ boolexp

comm ::= skip
       | assignL
       | var = intexp
       | comm ; comm
       | if boolexp then comm
       | if boolexp then comm else comm
       | while boolexp do comm
       
______________________________

SINTAXIS CONCRETA

digit ::= ’0’ | ’1’ |...| ’9’ 
letter ::= ’a’ |...| ’Z’
nat ::= digit | digit nat
var ::= letter | letter var

intexp ::= nat
         | var
         | ’-’ intexp
         | intexp ’+’ intexp
         | intexp ’-’ intexp
         | intexp ’*’ intexp
         | intexp ’/’ intexp
         | ’(’ intexp ’)’
         | var '=' intexp
         | intexp ',' intexp

boolexp ::= ’true’
          | ’false’
          | intexp ’==’ intexp
          | intexp ’!=’ intexp
          | intexp ’<’ intexp
          | intexp ’>’ intexp
          | boolexp ’&&’ boolexp
          |boolexp ’||’ boolexp
          | ’!’ boolexp
          | ’(’ boolexp ’)’

comm ::= skip
       | assignL
       | var ’=’ intexp
       | comm ’;’ comm
       | ’if’ boolexp ’{’ comm ’}’
       | ’if’ boolexp ’{’ comm ’}’  ’else’ ’{’ comm ’}’
       | ’while’ boolexp ’{’ comm ’}’



